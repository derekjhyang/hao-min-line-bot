[tox]
skipsdist = True
isolated_build = True
envlist = clean, linters

[testenv]
basepython = python3
recreate = True
setenv =
    LINT_TARGETS = {toxinidir}/line_bot
passenv = *
#allowlist_externals = allure
# Adds --pre to the opts passed to install_command.
pip_pre = True
deps =
    -r requirements.txt
    #-c constraints.txt
# change pytest tempdir and add posargs from command line
commands =
    py.test -vv \
           --show-capture=no \
           --code-highlight=yes \
           --basetemp="{envtmpdir}" \
           --clean-alluredir \
           --alluredir=targets/allure-results \
           --junit-xml=targets/junit-xml-report.xml \
           --cov --cov-append --cov-report=term-missing \
           {posargs}

[pytest]
minversion = 6.0
addopts = -ra
testpaths =
    tests/api
log_cli = 1
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S
junit_family = xunit2

[testenv:clean]
deps =
    pyclean
    coverage
allowlist_externals = /bin/rm
commands =
    pyclean {toxinidir}
    coverage erase
    rm -rf targets
    rm -rf allure-report
    rm -rf htmlcov
    rm -rf coverage.xml
    rm -rf .pytest_cache
    rm -rf .tox

[testenv:allure]
commands =
    ## Generate allure report
    allure generate targets/allure-results -o allure-report --clean

    ## View allure report
    allure serve targets/allure-results

[testenv:pylint]
deps =
    {[testenv]deps}
commands =
    pylint {posargs:{env:LINT_TARGETS}}

[testenv:black]
description = Auto-format source code.
# Do not install the current package.
skip_install = true
deps =
    black
commands =
    black --line-length 120 {posargs:{env:LINT_TARGETS}}

[testenv:autopep8]
description = Auto-format source code for pep8 style.
skip_install = true
deps =
    autopep8
commands =
    autopep8 --in-place --aggressive --recursive {posargs:{env:LINT_TARGETS}}

[testenv:flake8]
description = Run flake8.
skip_install = true
deps =
    {[testenv]deps}
commands =
    flake8 {posargs:{env:LINT_TARGETS}}

[testenv:yamllint]
description = YAML linter
skip_install = true
deps =
    yamllint
commands =
    yamllint -c .yamllintrc -f auto {posargs:{env:APP_ROOT_PATH}}

[testenv:linters]
description = Run all linters.
deps =
    {[testenv:black]deps}
    {[testenv:autopep8]deps}
    {[testenv]deps}
commands =
    {[testenv:autopep8]commands}
    {[testenv:black]commands}
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}

[testenv:cov]
skip_install = true
deps =
    coverage
commands =
    #coverage combine
    coverage report
    #coverage xml
    coverage html

[flake8]
exclude =
    .tox,
    .git,
    __pycache__,
    doc/conf.py,
    build,
    dist,
    integration_test/fixtures/*,
    integration_test/tub_base/*,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs
ignore =
    # black inserts a blank line between function docstring and wrapped function
    # https://github.com/ambv/black/issues/196#issuecomment-392688816
    D202,
    # https://black.readthedocs.io/en/stable/the_black_code_style.html#line-breaks-binary-operators
    W503,
max-line-length = 120
max-complexity = 10
import-order-style = google
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s